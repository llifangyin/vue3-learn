{
  "version": 3,
  "sources": ["../src/runtimeHelpers.ts", "../src/ast.ts", "../src/parser.ts", "../src/transform.ts", "../src/index.ts"],
  "sourcesContent": ["export const TO_DISPLAY_STRING = Symbol(\"TO_DISPLAY_STRING\");\nexport const CREATE_TEXT_VNODE = Symbol(\"CREATE_TEXT_VNODE\");\nexport const CREATE_ELEMENT_VNODE = Symbol(\"CREATE_ELEMENT_VNODE\");\n\nexport const OPEN_BLOCK = Symbol(\"OPEN_BLOCK\");\nexport const CREATE_ELEMENT_BLOCK = Symbol(\"CREATE_ELEMENT_BLOCK\");\nexport const Fragment = Symbol(\"Fragment\");\nexport const helperNameMap = {\n  [TO_DISPLAY_STRING]: \"toDisplayString\",\n  [CREATE_TEXT_VNODE]: \"createTextVnode\",\n  [CREATE_ELEMENT_VNODE]: \"createElementVnode\",\n  [CREATE_ELEMENT_BLOCK]: \"createElementBlock\",\n  [OPEN_BLOCK]: \"openBlock\",\n  [Fragment]: \"Fragment\",\n};\n// \u5B8F\n", "import {\r\n    CREATE_ELEMENT_VNODE,\r\n    CREATE_TEXT_VNODE,\r\n    Fragment,\r\n  } from \"./runtimeHelpers\";\r\n  \r\n  export enum NodeTypes {\r\n    ROOT,\r\n    ELEMENT,\r\n    TEXT,\r\n    COMMENT,\r\n    SIMPLE_EXPRESSION, // {{ name }}\r\n    INTERPOLATION, // {{}}\r\n    ATTRIBUTE,\r\n    DIRECTIVE,\r\n    // containers\r\n    COMPOUND_EXPRESSION, // {{ name}} + 'abc'\r\n    IF,\r\n    IF_BRANCH,\r\n    FOR,\r\n    TEXT_CALL, // createVnode\r\n    // x\r\n    VNODE_CALL,\r\n    JS_CALL_EXPRESSION, // ()\r\n    JS_OBJECT_EXPRESSION, // props\r\n    JS_PROPERTY,\r\n    JS_ARRAY_EXPRESSION,\r\n    JS_FUNCTION_EXPRESSION,\r\n    JS_CONDITIONAL_EXPRESSION,\r\n    JS_CACHE_EXPRESSION,\r\n  \r\n    // ssr codegen\r\n    JS_BLOCK_STATEMENT,\r\n    JS_TEMPLATE_LITERAL,\r\n    JS_IF_STATEMENT,\r\n    JS_ASSIGNMENT_EXPRESSION,\r\n    JS_SEQUENCE_EXPRESSION,\r\n    JS_RETURN_STATEMENT,\r\n  }\r\n  \r\n  export function createCallExpression(context, args) {\r\n    let name = context.helper(CREATE_TEXT_VNODE);\r\n  \r\n    return {\r\n      // createTextVnode()\r\n      type: NodeTypes.JS_CALL_EXPRESSION,\r\n      arguments: args, // createTextVnode(child,1)\r\n      callee: name,\r\n    };\r\n  }\r\n  export function createVnodeCall(context, tag, props, children) {\r\n    // createElementVnode()\r\n    let name;\r\n  \r\n    if (tag !== Fragment) {\r\n      name = context.helper(CREATE_ELEMENT_VNODE);\r\n    }\r\n  \r\n    return {\r\n      // createTextVnode()\r\n      type: NodeTypes.VNODE_CALL,\r\n      callee: name,\r\n      tag,\r\n      props,\r\n      children,\r\n    };\r\n  }\r\n  \r\n  export function createObjectExpression(properies) {\r\n    // {a:1,b:2,c:3}\r\n  \r\n    return {\r\n      type: NodeTypes.JS_OBJECT_EXPRESSION,\r\n      properies,\r\n    };\r\n  }\r\n  ", "// \u7F16\u8BD1\u5206\u4E3A\u4E09\u6B65\r\n// 1.  \u6A21\u677F\u8F6C\u4E3Aast\u8BED\u6CD5\u6811\r\n// 2.  \u8F6C\u5316codegennode \r\n// 3.  \u8F6C\u5316\u6210\u5B57\u7B26\u4E32\r\n\r\nimport { NodeTypes } from \"./ast\"\r\n\r\n\r\nfunction createParseContext(content) {\r\n    return {\r\n        originalSource: content,\r\n        source: content,//\u5B57\u7B26\u4E32\u4E0D\u505C\u7684\u622A\u53D6\r\n        line: 1,//\u7B2C\u4E00\u884C\r\n        column: 1,//\u7B2C\u4E00\u5217\r\n        offset: 0,//\u504F\u79FB\u91CF\r\n    }\r\n}\r\nfunction isEnd(context) {\r\n    const c = context.source\r\n    if(c.startsWith('</')){\r\n        return true\r\n    }\r\n    return !context.source\r\n}\r\n\r\nfunction advancePositionMutation(context, c, endIndex) {\r\n    let linesCount = 0; // \u7B2C\u51E0\u884C\r\n    let linePos = -1; // \u6362\u884C\u7684\u4F4D\u7F6E\u4FE1\u606F\r\n  \r\n    for (let i = 0; i < endIndex; i++) {\r\n      if (c.charCodeAt(i) == 10) {\r\n        linesCount++;\r\n        linePos = i;\r\n      }\r\n    }\r\n    context.offset += endIndex;\r\n    context.line += linesCount;\r\n    context.column =\r\n      linePos == -1 ? context.column + endIndex : endIndex - linePos;\r\n  }\r\n  \r\nfunction advanceBy(context,endIndex){\r\n    let c  = context.source\r\n    advancePositionMutation(context, c, endIndex);\r\n    context.source = c.slice(endIndex)\r\n}\r\nfunction parseTextData(context,endIndex){\r\n    const rawText = context.source.slice(0,endIndex)\r\n    advanceBy(context,endIndex)//\u622A\u53D6\u5B57\u7B26\u4E32\r\n    return rawText\r\n}\r\nfunction parseText(context){\r\n    let tokens = ['<','{{']//\u5F53\u524D\u79BB\u5F97\u6700\u8FD1\u7684\u6807\u8BB0\r\n    let endIndex = context.source.length;\r\n    for(let i = 0;i<tokens.length;i++){\r\n        const index = context.source.indexOf(tokens[i],1)\r\n        if(index!==-1 && index<endIndex){\r\n            endIndex = index\r\n        }\r\n    }\r\n    let start = getCursor(context);\r\n    //  0 - endIndex \u4E3A\u6587\u672C\u8282\u70B9\r\n   return {\r\n    type: NodeTypes.TEXT,\r\n    start,\r\n    content: parseTextData(context,endIndex)\r\n   }\r\n\r\n}\r\nfunction advanceSpaces(context){\r\n    // \u5339\u914D\u7A7A\u683C\r\n    const match = /^[ \\t\\r\\n]+/.exec(context.source);\r\n    if (match) {\r\n      // \u5220\u9664\u7A7A\u683C\r\n      advanceBy(context, match[0].length);\r\n    }\r\n}\r\n\r\n// hack \u6D4F\u89C8\u5668\u4E0D\u8BC6\u522BgetCursor\u597DgetSelection\u65B9\u6CD5\r\nfunction getCursor(context) {\r\n    let { line, column, offset } = context;\r\n    return { line, column, offset };\r\n  }\r\n  function getSelection(context, start, e?) {\r\n    let end = e || getCursor(context);\r\n    // eslint \u53EF\u4EE5\u6839\u636E start\uFF0Cend\u627E\u5230\u8981\u62A5\u9519\u7684\u4F4D\u7F6E\r\n    return {\r\n      start,\r\n      end,\r\n      source: context.originalSource.slice(start.offset, end.offset),\r\n    };\r\n  }\r\n  function parseAttributeValue(context) {\r\n    let quote = context.source[0];\r\n  \r\n    const isQuoted = quote === '\"' || quote === \"'\";\r\n  \r\n    let content;\r\n    if (isQuoted) {\r\n      advanceBy(context, 1);\r\n      const endIndex = context.source.indexOf(quote, 1);\r\n      content = parseTextData(context, endIndex); // slice()\r\n      advanceBy(context, 1);\r\n    } else {\r\n      content = context.source.match(/([^ \\t\\r\\n/>])+/)[1]; // \u53D6\u51FA\u5185\u5BB9\uFF0C\u5220\u9664\u7A7A\u683C\r\n      advanceBy(context, content.length);\r\n      advanceSpaces(context);\r\n    }\r\n    return content;\r\n  }\r\n  function parseAttribute(context) {\r\n    const start = getCursor(context);\r\n    // a   = '1'\r\n    let match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    let value;\r\n    advanceBy(context, name.length);\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n      advanceSpaces(context); //\r\n      advanceBy(context, 1);\r\n      advanceSpaces(context);\r\n      value = parseAttributeValue(context);\r\n    }\r\n    let loc = getSelection(context, start);\r\n    return {\r\n      type: NodeTypes.ATTRIBUTE,\r\n      name,\r\n      value: {\r\n        type: NodeTypes.TEXT,\r\n        content: value,\r\n        loc: loc,\r\n      },\r\n      loc: getSelection(context, start),\r\n    };\r\n  }\r\n  const parseAtrributes = (context) => {\r\n    const props = [];\r\n    while (context.source.length > 0 && !context.source.startsWith(\">\")) {\r\n        props.push(parseAttribute(context));\r\n        advanceSpaces(context);\r\n      }\r\n    return props;\r\n  }\r\nfunction parseTag(context){\r\n    const start = getCursor(context);\r\n        const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source);\r\n        const tag = match[1]; // <div   />\r\n\r\n        advanceBy(context, match[0].length); // \u5220\u9664\u5339\u914D\u5230\u7684\u5185\u5BB9\r\n\r\n        advanceSpaces(context); // \u7A7A\u683C\u79FB\u9664\r\n\r\n        // <div a=\"1\" B='1' >\r\n\r\n        let props = parseAtrributes(context);\r\n        const isSelfClosing = context.source.startsWith(\"/>\");\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n        return {\r\n            type: NodeTypes.ELEMENT,\r\n            tag,\r\n            isSelfClosing,\r\n            loc: getSelection(context, start), // \u5F00\u5934\u6807\u7B7E\u89E3\u6790\u540E\u7684\u4FE1\u606F\r\n            props,\r\n        };\r\n}\r\nfunction parseElement(context){\r\n    const ele = parseTag(context);\r\n\r\n    const children = parseChildren(context); // \u9012\u5F52\u89E3\u6790\u513F\u5B50\u8282\u70B9,\u4F46\u662F\u89E3\u6790\u7684\u65F6\u5019\u5982\u679C\u662F\u7ED3\u5C3E\u6807\u7B7E\u9700\u8981\u8DF3\u8FC7\r\n  \r\n    if (context.source.startsWith(\"</\")) {\r\n      parseTag(context); //  \u95ED\u5408\u6807\u7B7E\u6CA1\u6709\u610F\u4E49\u76F4\u63A5\u79FB\u9664\u5373\u53EF\r\n    }\r\n    (ele as any).children = children;\r\n    (ele as any).loc = getSelection(context, ele.loc.start);\r\n    return ele;\r\n}\r\nfunction parseInterpolation(context) {\r\n    const start = getCursor(context);\r\n    const closeIndex = context.source.indexOf(\"}}\", 2);\r\n    advanceBy(context, 2); // \u53BB\u6389\u5F00\u5934 {{\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const preTrimContent = parseTextData(context, closeIndex - 2);\r\n    const content = preTrimContent.trim(); // \u8868\u8FBE\u5F0F\u4E2D\u7684\u53D8\u91CF\r\n    // \u83B7\u53D6  {{   name   }}\u53BB\u7A7A\u683C\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n      advancePositionMutation(innerStart, preTrimContent, startOffset);\r\n    }\r\n    const endOffset = startOffset + content.length;\r\n    advancePositionMutation(innerEnd, preTrimContent, endOffset);\r\n    advanceBy(context, 2);\r\n    //    name   }}\r\n    return {\r\n      type: NodeTypes.INTERPOLATION,\r\n      content: {\r\n        type: NodeTypes.SIMPLE_EXPRESSION,\r\n        isStatic: false,\r\n        isConstant: false,\r\n        content,\r\n        loc: getSelection(context, innerStart, innerEnd),\r\n      },\r\n      loc: getSelection(context, start),\r\n    };\r\n  }\r\nfunction parseChildren(context) {\r\n    const nodes = [] as any;\r\n    while (!isEnd(context)) {\r\n        const c = context.source; // \u73B0\u5728\u89E3\u6790\u7684\u5185\u5BB9\r\n        let node;\r\n        if (c.startsWith(\"{{\")) {\r\n        // {{}}\r\n        node = parseInterpolation(context);\r\n        } else if (c[0] === \"<\") {\r\n        // <div>\r\n        node = parseElement(context);\r\n        } else {\r\n        // \u6587\u672C  // abc  {{}} <div></div>\r\n        node = parseText(context);\r\n        }\r\n        // \u72B6\u6001\u673A\r\n        nodes.push(node);\r\n    }\r\n    // \u72B6\u6001\u673A\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        let node = nodes[i];\r\n        // \u5C06\u7A7A\u8282\u70B9\u8FDB\u884C\u538B\u7F29\r\n        if (node.type === NodeTypes.TEXT) {\r\n        // \u5982\u679C\u662F\u7A7A\u767D\u5B57\u7B26 \u6E05\u7A7A\r\n        if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n            nodes[i] = null; // \u7A7A\u767D\u5B57\u7B26\u6E05\u7A7A\r\n        } else {\r\n            node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, \" \");\r\n        }\r\n        }\r\n    }\r\n\r\n    return nodes.filter(Boolean);\r\n}\r\nfunction createRoot(children) {\r\n    return {\r\n        type: NodeTypes.ROOT,\r\n        children\r\n    }\r\n}\r\nfunction parse(template){\r\n    // \u6839\u636Etemplate\u751F\u6210ast\u8BED\u6CD5\u6811 line column offset\r\n    const context = createParseContext(template)\r\n    //  <p><div></div><div></div></p>\r\n    // { type:1,tag:'p',children:[{type:1,tag:'div',children:[]},{type:1,tag:'div',children:[]}] }\r\n    return createRoot(parseChildren(context))\r\n}\r\nexport  {\r\n    parse\r\n}\r\n\r\n\r\n", "import { PatchFlags } from \"@vue/shared\";\nimport {\n  NodeTypes,\n  createCallExpression,\n  createObjectExpression,\n  createVnodeCall,\n} from \"./ast\";\n\nimport {\n  CREATE_ELEMENT_BLOCK,\n  CREATE_ELEMENT_VNODE,\n  OPEN_BLOCK,\n  TO_DISPLAY_STRING,\n  Fragment,\n} from \"./runtimeHelpers\";\n\n// dom\u7684\u904D\u5386\u65B9\u5F0F\uFF0C \u5148\u5E8F\uFF0C\u540E\u7EED\n\n// -\u300B\u5143\u7D20 -\u300B\u6587\u672C -\u300B \u6587\u672C\u5904\u7406\u540E -\u300B \u5143\u7D20\u5904\u7406\u540E \u7EC4\u4EF6\u6302\u5728\u6D41\u7A0B\nfunction transformElement(node, context) {\n  if (NodeTypes.ELEMENT == node.type) {\n    return function () {\n      let { tag, props, children } = node;\n      let vnodeTag = tag; // createElementVnode(div)\n      let properties = [];\n      for (let i = 0; i < props.length; i++) {\n        properties.push({ key: props[i].name, value: props[i].value.content });\n      }\n\n      const propsExpression =\n        properties.length > 0 ? createObjectExpression(properties) : null;\n\n      let vnodeChildren = null;\n      if (children.length == 1) {\n        vnodeChildren = children[0];\n      } else if (children.length > 1) {\n        vnodeChildren = children;\n      }\n\n      node.codegenNode = createVnodeCall(\n        context,\n        vnodeTag,\n        propsExpression,\n        vnodeChildren\n      );\n    };\n  }\n}\nfunction isText(node) {\n  return node.type === NodeTypes.INTERPOLATION || node.type === NodeTypes.TEXT;\n}\nfunction transformText(node, context) {\n  if (NodeTypes.ELEMENT == node.type || node.type === NodeTypes.ROOT) {\n    // \u6CE8\u610F\u5904\u7406\u987A\u5E8F\uFF0C\u8981\u7B49\u5F85\u5B50\u8282\u70B9\u5168\u90E8\u5904\u7406\u540E\uFF0C\u5728\u8D4B\u503C\u7ED9\u7236\u5143\u7D20\n    return function () {\n      const children = node.children;\n      let container = null;\n      let hasText = false;\n      for (let i = 0; i < children.length; i++) {\n        let child = children[i];\n\n        if (isText(child)) {\n          hasText = true;\n          for (let j = i + 1; j < children.length; j++) {\n            const next = children[j];\n            if (isText(next)) {\n              if (!container) {\n                container = children[i] = {\n                  type: NodeTypes.COMPOUND_EXPRESSION,\n                  children: [child],\n                };\n              }\n              container.children.push(`+`, next);\n              children.splice(j, 1);\n              j--;\n            } else {\n              container = null;\n              break;\n            }\n          }\n        }\n      }\n      // \u6211\u4EEC\u9700\u8981\u770B\u4E00\u4E0B \u6587\u672C\u8282\u70B9\u662F\u4E0D\u662F\u53EA\u6709\u4E00\u4E2A\uFF0C\u53EA\u6709\u4E00\u4E2A\u4E0D\u9700\u8981createTextVnode\n      if (!hasText || children.length == 1) {\n        return;\n      }\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (isText(child) || child.type === NodeTypes.COMPOUND_EXPRESSION) {\n          const args = [];\n          args.push(child);\n          if (child.type !== NodeTypes.TEXT) {\n            args.push(PatchFlags.TEXT);\n          }\n          children[i] = {\n            type: NodeTypes.TEXT_CALL, // createTextVnode\n            content: child,\n            codegenNode: createCallExpression(context, args), // createTextVnode(\u5185\u5BB9\uFF0Cargs)\n          };\n        }\n      }\n\n      //createTextVnode\n      //codegenNode\n    };\n  }\n}\nfunction transformExpression(node, context) {\n  if (NodeTypes.INTERPOLATION == node.type) {\n    node.content.content = `_ctx.${node.content.content}`;\n  }\n}\nfunction createTransformContext(root) {\n  const context = {\n    currentNode: root,\n    parent: null,\n\n    // createElementVnode  createTextVnode   toDisplayString\n    transformNode: [transformElement, transformText, transformExpression],\n    helpers: new Map(), // createElementVnode 1\n    helper(name) {\n      let count = context.helpers.get(name) || 0;\n      context.helpers.set(name, count + 1);\n      return name;\n    },\n    removeHelper(name) {\n      let count = context.helpers.get(name);\n      if (count) {\n        let c = count - 1;\n        if (!c) {\n          context.helpers.delete(name);\n        } else {\n          context.helpers.set(name, c);\n        }\n      }\n    },\n  };\n  return context;\n}\n\nfunction traverseNode(node, context) {\n  context.currentNode = node;\n  const transforms = context.transformNode;\n\n  const exits = []; // \u5143\u7D20\u51FD\u6570\uFF0C\u6587\u672C\u51FD\u6570\uFF0C\u8868\u8FBE\u5F0F\u7684\u51FD\u6570\n  for (let i = 0; i < transforms.length; i++) {\n    let exit = transforms[i](node, context);\n    exit && exits.push(exit);\n  }\n  switch (node.type) {\n    case NodeTypes.ROOT:\n    case NodeTypes.ELEMENT:\n      for (let i = 0; i < node.children.length; i++) {\n        context.parent = node;\n        traverseNode(node.children[i], context);\n      }\n      break;\n    // \u5BF9\u8868\u8FBE\u5F0F\u7684\u5904\u7406\n    case NodeTypes.INTERPOLATION:\n      context.helper(TO_DISPLAY_STRING);\n      break;\n  }\n  context.currentNode = node; // \u56E0\u4E3AtraverseNode \u4F1A\u5C06node\u53D8\u6210\u5B50\u8282\u70B9\n  let i = exits.length;\n  if (i > 0) {\n    while (i--) {\n      exits[i]();\n    }\n  }\n}\n\n// \u6811\u7684\u904D\u5386\n// 1.\n//  1.1\n//   1.1.1 -\u300B\uFF1F\n// 2\n\n// \u5BF9\u6839\u8282\u70B9\u6765\u505A\u5904\u7406 1.\u6587\u672C  2.\u4E00\u4E2A\u5143\u7D20 x createElementVnode -> createElementBlock\n// 3.\u591A\u4E2A createElementBlock(Fragment)\n\nfunction createRootCodegenNode(ast, context) {\n  let { children } = ast;\n\n  if (children.length == 1) {\n    let child = children[0];\n\n    if (child.type === NodeTypes.ELEMENT) {\n      ast.codegenNode = child.codegenNode;\n      context.removeHelper(CREATE_ELEMENT_VNODE);\n      context.helper(CREATE_ELEMENT_BLOCK);\n      context.helper(OPEN_BLOCK);\n      ast.codegenNode.isBlock = true;\n    } else {\n      ast.codegenNode = child;\n    }\n  } else if (children.length > 0) {\n    // \u4EA7\u751F\u4E00\u4E2Afragment\n\n    ast.codegenNode = createVnodeCall(\n      context,\n      context.helper(Fragment),\n      undefined,\n      children\n    );\n    context.helper(CREATE_ELEMENT_BLOCK);\n    context.helper(OPEN_BLOCK);\n    ast.codegenNode.isBlock = true;\n  }\n}\nfunction transform(ast) {\n  // babel babel-traverse\n\n  const context = createTransformContext(ast);\n  traverseNode(ast, context);\n\n  createRootCodegenNode(ast, context);\n\n  // \u5BF9\u6839\u8282\u70B9\u5904\u7406\n  ast.helpers = [...context.helpers.keys()];\n}\n\nexport { transform };\n", "// \u7F16\u8BD1\u4E3B\u8981\u5206\u4E3A\u4E09\u6B65 1. \u9700\u8981\u5C06\u6A21\u677F\u8F6C\u5316\u6210ast\u8BED\u6CD5\u6811   2.\u8F6C\u5316\u751F\u6210codegennode 3.\u8F6C\u5316\u6210render\u51FD\u6570\r\n// \u5C06\u6A21\u677F\u8F6C\u6362\u6210ast\u8BED\u6CD5\u6811\r\n//\r\n\r\n// codegennode, \u53D8\u91CF\u6587\u5B57  todisplayString   \u5143\u7D20 createElementVnode  createTextVnode\r\n// openBlock  createElementBlock\r\n\r\n// -> \u5B57\u7B26\u4E32\r\nimport { NodeTypes } from \"./ast\";\r\nimport { parse } from \"./parser\";\r\nimport {\r\n  CREATE_ELEMENT_BLOCK,\r\n  CREATE_ELEMENT_VNODE,\r\n  OPEN_BLOCK,\r\n  TO_DISPLAY_STRING,\r\n  helperNameMap,\r\n} from \"./runtimeHelpers\";\r\nimport { transform } from \"./transform\";\r\n\r\nfunction createCodegenContext(ast) {\r\n  const context = {\r\n    code: ``,\r\n    level: 0,\r\n    helper(name) {\r\n      return \"_\" + helperNameMap[name];\r\n    },\r\n    push(code) {\r\n      context.code += code;\r\n    },\r\n    indent() {\r\n      newLine(++context.level);\r\n    },\r\n    deindent(noNewLine = false) {\r\n      if (noNewLine) {\r\n        --context.level;\r\n      } else {\r\n        newLine(--context.level);\r\n      }\r\n    },\r\n    newLine() {\r\n      newLine(context.level);\r\n    },\r\n  };\r\n  function newLine(n) {\r\n    context.push(\"\\n\" + `  `.repeat(n));\r\n  }\r\n\r\n  return context;\r\n}\r\nfunction genFunctionPreamble(ast, context) {\r\n  const { push, indent, deindent, newLine } = context;\r\n\r\n  if (ast.helpers.length > 0) {\r\n    console.log(ast.helpers);\r\n    push(\r\n      `const {${ast.helpers.map(\r\n        (item) => `${helperNameMap[item]}:${context.helper(item)}`\r\n      )}} = Vue`\r\n    );\r\n    newLine();\r\n  }\r\n\r\n  push(`return function render(_ctx){`);\r\n}\r\nfunction genText(node, context) {\r\n  context.push(JSON.stringify(node.content));\r\n}\r\nfunction genInterpolation(node, context) {\r\n  const { push, indent, deindent, newLine, helper } = context;\r\n\r\n  push(`${helper(TO_DISPLAY_STRING)}(`);\r\n  genNode(node.content, context);\r\n  push(`)`);\r\n}\r\nfunction genExpression(node, context) {\r\n  context.push(node.content);\r\n}\r\nfunction genVnodeCall(node, context) {\r\n  const { push, indent, deindent, newLine, helper } = context;\r\n  const { tag, props, children, isBlock } = node;\r\n  if (node.isBlock) {\r\n    push(`(${helper(OPEN_BLOCK)}(),`);\r\n  }\r\n  const h = isBlock ? CREATE_ELEMENT_BLOCK : CREATE_ELEMENT_VNODE;\r\n\r\n  push(`${helper(h)}(`);\r\n\r\n  [tag, props, children]; // ....\r\n\r\n  if (node.isBlock) {\r\n    push(`)`);\r\n  }\r\n\r\n  push(`)`);\r\n}\r\nfunction genNode(node, context) {\r\n  const { push, indent, deindent, newLine } = context;\r\n  switch (node.type) {\r\n    case NodeTypes.TEXT:\r\n      genText(node, context);\r\n      break;\r\n    case NodeTypes.INTERPOLATION:\r\n      genInterpolation(node, context);\r\n      break;\r\n    case NodeTypes.SIMPLE_EXPRESSION:\r\n      genExpression(node, context);\r\n      break;\r\n    case NodeTypes.VNODE_CALL:\r\n      genVnodeCall(node, context);\r\n      break;\r\n  }\r\n}\r\nfunction generate(ast) {\r\n  const context = createCodegenContext(ast);\r\n\r\n  genFunctionPreamble(ast, context);\r\n  const { push, indent, deindent, newLine } = context;\r\n  indent();\r\n  push(`return `);\r\n\r\n  if (ast.codegenNode) {\r\n    genNode(ast.codegenNode, context);\r\n  } else {\r\n    push(\"null\");\r\n  }\r\n\r\n  deindent();\r\n  push(`}`);\r\n\r\n  return context.code;\r\n}\r\nexport function compile(template) {\r\n  const ast = parse(template);\r\n\r\n  // \u8FDB\u884C\u4EE3\u7801\u7684\u8F6C\u5316\r\n  transform(ast);\r\n\r\n  return generate(ast);\r\n}\r\n\r\nexport { parse };\r\n"],
  "mappings": "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",
  "names": ["i"]
}
