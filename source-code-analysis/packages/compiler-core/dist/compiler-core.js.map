{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// \u7F16\u8BD1\u5206\u4E3A\u4E09\u6B65\r\n// 1.  \u6A21\u677F\u8F6C\u4E3Aast\u8BED\u6CD5\u6811\r\n// 2.  \u8F6C\u5316codegennode \r\n// 3.  \u8F6C\u5316\u6210\u5B57\u7B26\u4E32\r\n\r\nimport { NodeTypes } from \"./ast\"\r\n\r\n\r\nfunction createParseContext(content) {\r\n    return {\r\n        originalSource: content,\r\n        source: content,//\u5B57\u7B26\u4E32\u4E0D\u505C\u7684\u622A\u53D6\r\n        line: 1,//\u7B2C\u4E00\u884C\r\n        column: 1,//\u7B2C\u4E00\u5217\r\n        offset: 0,//\u504F\u79FB\u91CF\r\n    }\r\n}\r\nfunction isEnd(context) {\r\n    const c = context.source\r\n    if(c.startsWith('</')){\r\n        return true\r\n    }\r\n    return !context.source\r\n}\r\n\r\nfunction advancePositionMutation(context, c, endIndex) {\r\n    let linesCount = 0; // \u7B2C\u51E0\u884C\r\n    let linePos = -1; // \u6362\u884C\u7684\u4F4D\u7F6E\u4FE1\u606F\r\n  \r\n    for (let i = 0; i < endIndex; i++) {\r\n      if (c.charCodeAt(i) == 10) {\r\n        linesCount++;\r\n        linePos = i;\r\n      }\r\n    }\r\n    context.offset += endIndex;\r\n    context.line += linesCount;\r\n    context.column =\r\n      linePos == -1 ? context.column + endIndex : endIndex - linePos;\r\n  }\r\n  \r\nfunction advanceBy(context,endIndex){\r\n    let c  = context.source\r\n    advancePositionMutation(context, c, endIndex);\r\n    context.source = c.slice(endIndex)\r\n}\r\nfunction parseTextData(context,endIndex){\r\n    const rawText = context.source.slice(0,endIndex)\r\n    advanceBy(context,endIndex)//\u622A\u53D6\u5B57\u7B26\u4E32\r\n    return rawText\r\n}\r\nfunction parseText(context){\r\n    let tokens = ['<','{{']//\u5F53\u524D\u79BB\u5F97\u6700\u8FD1\u7684\u6807\u8BB0\r\n    let endIndex = context.source.length;\r\n    for(let i = 0;i<tokens.length;i++){\r\n        const index = context.source.indexOf(tokens[i],1)\r\n        if(index!==-1 && index<endIndex){\r\n            endIndex = index\r\n        }\r\n    }\r\n    let start = getCursor(context);\r\n    //  0 - endIndex \u4E3A\u6587\u672C\u8282\u70B9\r\n   return {\r\n    type: NodeTypes.TEXT,\r\n    start,\r\n    content: parseTextData(context,endIndex)\r\n   }\r\n\r\n}\r\nfunction advanceSpaces(context){\r\n    // \u5339\u914D\u7A7A\u683C\r\n    const match = /^[ \\t\\r\\n]+/.exec(context.source);\r\n    if (match) {\r\n      // \u5220\u9664\u7A7A\u683C\r\n      advanceBy(context, match[0].length);\r\n    }\r\n}\r\n\r\n// hack \u6D4F\u89C8\u5668\u4E0D\u8BC6\u522BgetCursor\u597DgetSelection\u65B9\u6CD5\r\nfunction getCursor(context) {\r\n    let { line, column, offset } = context;\r\n    return { line, column, offset };\r\n  }\r\n  function getSelection(context, start, e?) {\r\n    let end = e || getCursor(context);\r\n    // eslint \u53EF\u4EE5\u6839\u636E start\uFF0Cend\u627E\u5230\u8981\u62A5\u9519\u7684\u4F4D\u7F6E\r\n    return {\r\n      start,\r\n      end,\r\n      source: context.originalSource.slice(start.offset, end.offset),\r\n    };\r\n  }\r\n  function parseAttributeValue(context) {\r\n    let quote = context.source[0];\r\n  \r\n    const isQuoted = quote === '\"' || quote === \"'\";\r\n  \r\n    let content;\r\n    if (isQuoted) {\r\n      advanceBy(context, 1);\r\n      const endIndex = context.source.indexOf(quote, 1);\r\n      content = parseTextData(context, endIndex); // slice()\r\n      advanceBy(context, 1);\r\n    } else {\r\n      content = context.source.match(/([^ \\t\\r\\n/>])+/)[1]; // \u53D6\u51FA\u5185\u5BB9\uFF0C\u5220\u9664\u7A7A\u683C\r\n      advanceBy(context, content.length);\r\n      advanceSpaces(context);\r\n    }\r\n    return content;\r\n  }\r\n  function parseAttribute(context) {\r\n    const start = getCursor(context);\r\n    // a   = '1'\r\n    let match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    let value;\r\n    advanceBy(context, name.length);\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n      advanceSpaces(context); //\r\n      advanceBy(context, 1);\r\n      advanceSpaces(context);\r\n      value = parseAttributeValue(context);\r\n    }\r\n    let loc = getSelection(context, start);\r\n    return {\r\n      type: NodeTypes.ATTRIBUTE,\r\n      name,\r\n      value: {\r\n        type: NodeTypes.TEXT,\r\n        content: value,\r\n        loc: loc,\r\n      },\r\n      loc: getSelection(context, start),\r\n    };\r\n  }\r\n  const parseAtrributes = (context) => {\r\n    const props = [];\r\n    while (context.source.length > 0 && !context.source.startsWith(\">\")) {\r\n        props.push(parseAttribute(context));\r\n        advanceSpaces(context);\r\n      }\r\n    return props;\r\n  }\r\nfunction parseTag(context){\r\n    const start = getCursor(context);\r\n        const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source);\r\n        const tag = match[1]; // <div   />\r\n\r\n        advanceBy(context, match[0].length); // \u5220\u9664\u5339\u914D\u5230\u7684\u5185\u5BB9\r\n\r\n        advanceSpaces(context); // \u7A7A\u683C\u79FB\u9664\r\n\r\n        // <div a=\"1\" B='1' >\r\n\r\n        let props = parseAtrributes(context);\r\n        const isSelfClosing = context.source.startsWith(\"/>\");\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n        return {\r\n            type: NodeTypes.ELEMENT,\r\n            tag,\r\n            isSelfClosing,\r\n            loc: getSelection(context, start), // \u5F00\u5934\u6807\u7B7E\u89E3\u6790\u540E\u7684\u4FE1\u606F\r\n            props,\r\n        };\r\n}\r\nfunction parseElement(context){\r\n    const ele = parseTag(context);\r\n\r\n    const children = parseChildren(context); // \u9012\u5F52\u89E3\u6790\u513F\u5B50\u8282\u70B9,\u4F46\u662F\u89E3\u6790\u7684\u65F6\u5019\u5982\u679C\u662F\u7ED3\u5C3E\u6807\u7B7E\u9700\u8981\u8DF3\u8FC7\r\n  \r\n    if (context.source.startsWith(\"</\")) {\r\n      parseTag(context); //  \u95ED\u5408\u6807\u7B7E\u6CA1\u6709\u610F\u4E49\u76F4\u63A5\u79FB\u9664\u5373\u53EF\r\n    }\r\n    (ele as any).children = children;\r\n    (ele as any).loc = getSelection(context, ele.loc.start);\r\n    return ele;\r\n}\r\nfunction parseInterpolation(context) {\r\n    const start = getCursor(context);\r\n    const closeIndex = context.source.indexOf(\"}}\", 2);\r\n    advanceBy(context, 2); // \u53BB\u6389\u5F00\u5934 {{\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const preTrimContent = parseTextData(context, closeIndex - 2);\r\n    const content = preTrimContent.trim(); // \u8868\u8FBE\u5F0F\u4E2D\u7684\u53D8\u91CF\r\n    // \u83B7\u53D6  {{   name   }}\u53BB\u7A7A\u683C\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n      advancePositionMutation(innerStart, preTrimContent, startOffset);\r\n    }\r\n    const endOffset = startOffset + content.length;\r\n    advancePositionMutation(innerEnd, preTrimContent, endOffset);\r\n    advanceBy(context, 2);\r\n    //    name   }}\r\n    return {\r\n      type: NodeTypes.INTERPOLATION,\r\n      content: {\r\n        type: NodeTypes.SIMPLE_EXPRESSION,\r\n        isStatic: false,\r\n        isConstant: false,\r\n        content,\r\n        loc: getSelection(context, innerStart, innerEnd),\r\n      },\r\n      loc: getSelection(context, start),\r\n    };\r\n  }\r\nfunction parseChildren(context) {\r\n    const nodes = [] as any;\r\n    while (!isEnd(context)) {\r\n        const c = context.source; // \u73B0\u5728\u89E3\u6790\u7684\u5185\u5BB9\r\n        let node;\r\n        if (c.startsWith(\"{{\")) {\r\n        // {{}}\r\n        node = parseInterpolation(context);\r\n        } else if (c[0] === \"<\") {\r\n        // <div>\r\n        node = parseElement(context);\r\n        } else {\r\n        // \u6587\u672C  // abc  {{}} <div></div>\r\n        node = parseText(context);\r\n        }\r\n        // \u72B6\u6001\u673A\r\n        nodes.push(node);\r\n    }\r\n    // \u72B6\u6001\u673A\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        let node = nodes[i];\r\n        // \u5C06\u7A7A\u8282\u70B9\u8FDB\u884C\u538B\u7F29\r\n        if (node.type === NodeTypes.TEXT) {\r\n        // \u5982\u679C\u662F\u7A7A\u767D\u5B57\u7B26 \u6E05\u7A7A\r\n        if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n            nodes[i] = null; // \u7A7A\u767D\u5B57\u7B26\u6E05\u7A7A\r\n        } else {\r\n            node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, \" \");\r\n        }\r\n        }\r\n    }\r\n\r\n    return nodes.filter(Boolean);\r\n}\r\nfunction createRoot(children) {\r\n    return {\r\n        type: NodeTypes.ROOT,\r\n        children\r\n    }\r\n}\r\nfunction parse(template){\r\n    // \u6839\u636Etemplate\u751F\u6210ast\u8BED\u6CD5\u6811 line column offset\r\n    const context = createParseContext(template)\r\n    //  <p><div></div><div></div></p>\r\n    // { type:1,tag:'p',children:[{type:1,tag:'div',children:[]},{type:1,tag:'div',children:[]}] }\r\n    return createRoot(parseChildren(context))\r\n}\r\nfunction compile(){\r\n    \r\n}\r\nexport  {\r\n    parse,\r\n    compile\r\n}\r\n\r\n\r\n"],
  "mappings": "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",
  "names": []
}
